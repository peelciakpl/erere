import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.clock import Clock
from plyer import bluetooth


class BluetoothApp(BoxLayout):
    def __init__(self, **kwargs):
        super(BluetoothApp, self).__init__(**kwargs)
        self.orientation = 'vertical'

        self.devices_label = Label(text="Bluetooth Devices:")
        self.add_widget(self.devices_label)

        self.devices_list = TextInput(multiline=True)
        self.add_widget(self.devices_list)

        self.connect_button = Button(text="Connect", on_press=self.connect_to_pc)
        self.add_widget(self.connect_button)

        self.send_button = Button(text="Send", on_press=self.send_input)
        self.send_button.disabled = True
        self.add_widget(self.send_button)

        self.input_text = TextInput(hint_text="Enter input")
        self.add_widget(self.input_text)

        self.connected = False
        self.server_sock = None

        Clock.schedule_interval(self.check_bluetooth, 1)

    def check_bluetooth(self, dt):
        devices = bluetooth.discover_devices()
        self.devices_list.text = '\n'.join(devices)

    def connect_to_pc(self, instance):
        if not self.connected:
            selected_device = self.devices_list.text
            if selected_device:
                self.server_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
                self.server_sock.connect((selected_device[0], 1))
                self.connected = True
                self.devices_label.text = "Connected to: " + selected_device[0]
                self.connect_button.text = "Disconnect"
                self.send_button.disabled = False
        else:
            self.server_sock.close()
            self.connected = False
            self.devices_label.text = "Bluetooth Devices:"
            self.connect_button.text = "Connect"
            self.send_button.disabled = True

    def send_input(self, instance):
        if self.connected:
            input_data = self.input_text.text
            if input_data:
                self.server_sock.send(input_data)


class MyApp(App):
    def build(self):
        return BluetoothApp()


if __name__ == '__main__':
    MyApp().run()
